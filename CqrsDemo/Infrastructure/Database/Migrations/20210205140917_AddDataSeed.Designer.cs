// <auto-generated />
using System;
using CqrsDemo.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CqrsDemo.Infrastructure.Database.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20210205140917_AddDataSeed")]
    partial class AddDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CqrsDemo.Infrastructure.Domain.Entities.CommandStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommandStore");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2020, 12, 4, 20, 28, 3, 0, DateTimeKind.Unspecified),
                            Data = "{\"ParkingName\":\"Poznan Plaza\",\"Capacity\":2}",
                            Type = "CreateParking",
                            UserId = "30fb43bf-9689-4a16-b41f-75775d11a02f"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 12, 4, 20, 28, 3, 0, DateTimeKind.Unspecified),
                            Data = "{\"ParkingName\":\"Parking-786359\",\"Capacity\":2}",
                            Type = "CreateParking",
                            UserId = "30fb43bf-9689-4a16-b41f-75775d11a02f"
                        });
                });

            modelBuilder.Entity("CqrsDemo.Infrastructure.Domain.Entities.Parking", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.ToTable("Parking");

                    b.HasData(
                        new
                        {
                            Name = "Poznan Plaza",
                            IsOpened = false
                        },
                        new
                        {
                            Name = "Parking-786359",
                            IsOpened = true
                        });
                });

            modelBuilder.Entity("CqrsDemo.Infrastructure.Domain.Entities.ParkingPlace", b =>
                {
                    b.Property<string>("ParkingName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParkingName", "Number");

                    b.ToTable("ParkingPlaces");

                    b.HasData(
                        new
                        {
                            ParkingName = "Poznan Plaza",
                            Number = 1,
                            IsFree = true
                        },
                        new
                        {
                            ParkingName = "Poznan Plaza",
                            Number = 2,
                            IsFree = true
                        },
                        new
                        {
                            ParkingName = "Parking-786359",
                            Number = 3,
                            IsFree = true
                        },
                        new
                        {
                            ParkingName = "Parking-786359",
                            Number = 4,
                            IsFree = false
                        });
                });

            modelBuilder.Entity("CqrsDemo.Infrastructure.Domain.Entities.ParkingPlace", b =>
                {
                    b.HasOne("CqrsDemo.Infrastructure.Domain.Entities.Parking", "ParkingNameNavigation")
                        .WithMany("ParkingPlaces")
                        .HasForeignKey("ParkingName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingNameNavigation");
                });

            modelBuilder.Entity("CqrsDemo.Infrastructure.Domain.Entities.Parking", b =>
                {
                    b.Navigation("ParkingPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
